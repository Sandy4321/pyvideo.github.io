<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="http://pyvideo.org/" rel="alternate"></link><link href="http://pyvideo.org/feeds/speaker_joshua-jag-ginsberg.atom.xml" rel="self"></link><id>http://pyvideo.org/</id><updated>2014-09-16T00:00:00+00:00</updated><entry><title>A Nice Problem to Have: Django Under Heavy Load</title><link href="http://pyvideo.org/djangocon-2014/a-nice-problem-to-have-django-under-heavy-load.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Joshua "jag" Ginsberg</name></author><id>tag:pyvideo.org,2014-09-16:djangocon-2014/a-nice-problem-to-have-django-under-heavy-load.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&amp;quot;Don't prematurely optimize. Get your project to v1.0.&amp;quot; This is a mantra
often repeated in the Djangoverse. But what happens after v1.0 launch
when your awesome site is being crushed by traffic? Scaling Django under
load means finding bottlenecks, leveraging new tools, and customizing
code. This talk will show you how it's done.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FOPX/"&gt;http://amara.org/v/FOPX/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>